@page "/bike"
@using System.Net.Http.Json
@using eBike.Web.Data
@using Dapr.Client
@inject IJSRuntime jsRuntime
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

<h1>eBike</h1>

<EditForm OnSubmit="@SubmitAsync" class="form" Model="Model">
    <h3>User ID - Find</h3>
    <div class="form-group">
        <label for="user-id">User Id:</label>
        <InputText @bind-Value="@Model.User.UserId" DisplayName="User Id" id="user-id" @onchange="@OnUserIdChanged"></InputText>
    </div>

    <hr/>

    <div class="row">
        <div class="col">
            <h3>User</h3>
            <div class="form-group">
                <label for="name">Name:</label>
                <InputText @bind-Value="@Model.User.Name" DisplayName="Name" id="name"></InputText>
            </div>
             <div class="form-group">
                <label for="surname">Surname:</label>
                <InputText @bind-Value="@Model.User.Surname" DisplayName="Surname" id="surname"></InputText>
            </div>
        </div>
        <div class="col">
            <h3>Bike</h3>
            <div class="form-group">
                <label for="bike-name">Name:</label>
                <InputText @bind-Value="@Model.Bike.Name" DisplayName="Bike Name" id="bike-name"></InputText>
            </div>
            <div class="form-group">
                <label for="bike-latitude">Latitude:</label>
                <InputNumber @bind-Value="@Model.Bike.Latitude" DisplayName="Bike Latitude" id="bike-latitude"></InputNumber>
            </div>
            <div class="form-group">
                <label for="bike-longitude">Longitude:</label>
                <InputNumber @bind-Value="@Model.Bike.Longitude" DisplayName="Bike Longitude" id="bike-longitude"></InputNumber>
            </div>
        </div>
    </div>
    <div class="row">
          <button type="submit" class="btn btn-primary">Confirm</button>  
    </div>
</EditForm>

@code {
    [Inject]
    public DaprClient DaprClient { get; set; }
    public UserInsertViewModel Model { get; set; } = new UserInsertViewModel();

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;
    protected override async Task OnInitializedAsync(){
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
    }
    
    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        if (!firstRender) {
            if(currentPosition == null) {
                currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
                {
                    EnableHighAccuracy = true,
                    MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                    TimeoutTimeSpan = TimeSpan.FromMinutes(1)
                })).Location;
                Model.Bike.Longitude = currentPosition.Coords.Longitude;
                Model.Bike.Latitude = currentPosition.Coords.Latitude;
                this.StateHasChanged();   
            }
        }
    }

    public async Task SubmitAsync ()
    {
        var appIdAggregator = Environment.GetEnvironmentVariable("APPID_AGGREGATOR");
        var request = DaprClient.CreateInvokeMethodRequest(appIdAggregator, "/v1/Bikes/new-user-bike");
        request.Content = JsonContent.Create(Model);

        var response = await DaprClient.InvokeMethodWithResponseAsync(request);
        if (response.IsSuccessStatusCode) {
            var r = await response.Content.ReadFromJsonAsync<AggregatorResponseUserBike>();
            Model.User.UserId = r.UserId; 
            this.StateHasChanged();
        }
    }

    public async Task OnUserIdChanged (ChangeEventArgs changeEventArgs)
    {
        var userId = changeEventArgs.Value;
    }
}
