@page "/bike"
@using System.Net.Http.Json
@using eBike.Web.Data
@using Dapr.Client
@inject IJSRuntime jsRuntime
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

<h3>eBike</h3>

<EditForm OnSubmit="@SubmitAsync" class="form" Model="Model">
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText @bind-Value="@Model.User.Name" DisplayName="Name" id="name"></InputText>
    </div>
     <div class="form-group">
        <label for="surname">Surname:</label>
        <InputText @bind-Value="@Model.User.Surname" DisplayName="Surname" id="surname"></InputText>
    </div>
    <divider></divider>
    <div class="form-group">
        <label for="bike-name">Bike Name:</label>
        <InputText @bind-Value="@Model.Bike.Name" DisplayName="Bike Name" id="bike-name"></InputText>
    </div>
    <div class="form-group">
        <label for="bike-latitude">Bike Latitude:</label>
        <InputNumber @bind-Value="@Model.Bike.Latitude" DisplayName="Bike Latitude" id="bike-latitude"></InputNumber>
    </div>
    <div class="form-group">
        <label for="bike-longitude">Bike Longitude:</label>
        <InputNumber @bind-Value="@Model.Bike.Longitude" DisplayName="Bike Longitude" id="bike-longitude"></InputNumber>
    </div>
    <button type="submit" class="btn btn-primary">Confirm</button>
</EditForm>

@code {
    [Inject]
    public DaprClient DaprClient { get; set; }
    public UserInsertViewModel Model { get; set; } = new UserInsertViewModel();

    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;
    protected override async Task OnInitializedAsync(){
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
    }
    
    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        if (!firstRender) {
            if(currentPosition == null) {
                currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
                {
                    EnableHighAccuracy = true,
                    MaximumAgeTimeSpan = TimeSpan.FromHours(1),
                    TimeoutTimeSpan = TimeSpan.FromMinutes(1)
                })).Location;
                Model.Bike.Longitude = currentPosition.Coords.Longitude;
                Model.Bike.Latitude = currentPosition.Coords.Latitude;
                this.StateHasChanged();   
            }
        }
    }

    public async Task SubmitAsync ()
    {
        var appIdAggregator = Environment.GetEnvironmentVariable("APPID_AGGREGATOR");
        var request = DaprClient.CreateInvokeMethodRequest(appIdAggregator, "/v1/Bikes/new-user-bike");
        request.Content = JsonContent.Create(Model);

        var response = await DaprClient.InvokeMethodWithResponseAsync(request);
        if (response.IsSuccessStatusCode) {
            var r = await response.Content.ReadFromJsonAsync<AggregatorResponseUserBike>();
            Model.User.UserId = Guid.Parse(r.UserId);     
        }
    }
}
