@using Microsoft.AspNetCore.SignalR.Client
@using eBike.Commons.Events
<h3>NotificationComponent</h3>

<h5>Bike Events</h5>
@if (BikeEvents.Count > 0)
{
    <table class="table">
        @foreach (var e in BikeEvents)
        {
            <tr>
                <td><small>@(e.EventDate)</small></td>
                <td><small>@(e.Id)</small></td>
                <td>@(e.Name)</td>
                <td><small>@(e.Status)</small></td>
                <td>@(e.Latitude)</td>
                <td>@(e.Longitude)</td>
            </tr>
        }
    </table>
}

<hr />
<h5>User Events</h5>
@if (UserEvents.Count > 0)
{
    <table class="table">
        @foreach (var e in UserEvents)
        {
            <tr>
                <td><small>@(e.EventDate)</small></td>
                <td><small>@(e.Id)</small></td>
                <td>@(e.Name)</td>
                <td>@(e.Surname)</td>
            </tr>
        }
    </table>
}

@code {

    public List<BikeEvent> BikeEvents { get; set; } = new List<BikeEvent>();
    public List<UserEvent> UserEvents { get; set; } = new List<UserEvent>();
    protected override async Task OnInitializedAsync()
    {
        var url = "http://ebike.aggregator.bff/notification";
        var connection = new HubConnectionBuilder()
            .WithUrl(url)
            .WithAutomaticReconnect()
            .Build();
        connection.On<BikeEvent>("bike", OnBikeStatus);
        connection.On<UserEvent>("user-insert", OnUserStatus);
        connection.On<UserEvent>("user-update", OnUserStatus);
        await connection.StartAsync();
    }

    private void OnBikeStatus(BikeEvent @event)
    {
        BikeEvents.Add(@event);
        StateHasChanged();
    }

    private void OnUserStatus(UserEvent @event)
    {
        UserEvents.Add(@event);
        StateHasChanged();
    }
}
